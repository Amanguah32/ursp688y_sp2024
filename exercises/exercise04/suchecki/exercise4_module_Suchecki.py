# -*- coding: utf-8 -*-
"""exercise4_module_Suchecki.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RUEHwf4EebJCZ4hTNyPKqgq3X2lpi8vB
"""

def ward_proportion_of_affordable_housing(housing_projects_info, ward_info):

  # Merging the housing_projects_info and ward_info files

  housing_projects_with_pops_props = pd.merge(housing_projects_info, ward_info, left_on='MAR_WARD', right_on='NAME')

  housing_projects_with_pops_props = pd.merge(
      housing_projects_info, ward_info[['NAME','POP100','HU100']],
      left_on = 'MAR_WARD',
      right_on = 'NAME'
  )

  # Tracking the population of each ward
  ward1_pop = 0
  ward2_pop = 0
  ward3_pop = 0
  ward4_pop = 0
  ward5_pop = 0
  ward6_pop = 0
  ward7_pop = 0
  ward8_pop = 0

  # Tracking the total number of affordable housing units in each ward
  ward1_housing_counter = 0
  ward2_housing_counter = 0
  ward3_housing_counter = 0
  ward4_housing_counter = 0
  ward5_housing_counter = 0
  ward6_housing_counter = 0
  ward7_housing_counter = 0
  ward8_housing_counter = 0
  total_housing_counter = 0

  # Creating a for loop to iterate through the big csv file
  for index, row in housing_projects_with_pops_props.iterrows():
    # For each project, determine the ward and then add the number of affordable
    # units to the respective Ward counter and to the total unit counter
    if(row['NAME'] == 'Ward 1'):
      ward1_housing_counter = ward1_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward1_pop == 0):
        ward1_pop = row['POP100']
    if(row['NAME'] == 'Ward 2'):
      ward2_housing_counter = ward2_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward2_pop == 0):
        ward2_pop = row['POP100']
    if(row['NAME'] == 'Ward 3'):
      ward3_housing_counter = ward3_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward3_pop == 0):
        ward3_pop = row['POP100']
    if(row['NAME'] == 'Ward 4'):
      ward4_housing_counter = ward4_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward4_pop == 0):
        ward4_pop = row['POP100']
    if(row['NAME'] == 'Ward 5'):
      ward5_housing_counter = ward5_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward5_pop == 0):
        ward5_pop = row['POP100']
    if(row['NAME'] == 'Ward 6'):
      ward6_housing_counter = ward6_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward6_pop == 0):
        ward6_pop = row['POP100']
    if(row['NAME'] == 'Ward 7'):
      ward7_housing_counter = ward7_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward7_pop == 0):
        ward7_pop = row['POP100']
    if(row['NAME'] == 'Ward 8'):
      ward8_housing_counter = ward8_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      total_housing_counter = total_housing_counter + row['TOTAL_AFFORDABLE_UNITS']
      if(ward8_pop == 0):
        ward8_pop = row['POP100']

  # Create summary dictionary that tracks for each ward: Total Units, Ward Population,
  # Affordable Units per Capita, Affordable Units per 1000 people, Percentage of Affordable Units Compared to DC Total
  summary = {
      'Total Units' : {'Ward 1': ward1_housing_counter, 'Ward 2': ward2_housing_counter, 'Ward 3': ward3_housing_counter, 'Ward 4': ward4_housing_counter,
                       'Ward 5': ward5_housing_counter, 'Ward 6': ward6_housing_counter, 'Ward 7': ward7_housing_counter, 'Ward 8': ward8_housing_counter},
      'Ward Population' : {'Ward 1': ward1_pop, 'Ward 2': ward2_pop, 'Ward 3': ward3_pop, 'Ward 4': ward4_pop,
                           'Ward 5': ward5_pop, 'Ward 6': ward6_pop, 'Ward 7': ward7_pop, 'Ward 8': ward8_pop},
      'Affordable Units per Capita' : {'Ward 1': (ward1_housing_counter / ward1_pop), 'Ward 2': (ward2_housing_counter / ward2_pop), 'Ward 3': (ward3_housing_counter / ward3_pop),
                                       'Ward 4': (ward4_housing_counter / ward4_pop), 'Ward 5': (ward5_housing_counter / ward5_pop), 'Ward 6': (ward6_housing_counter / ward6_pop),
                                       'Ward 7': (ward7_housing_counter / ward7_pop), 'Ward 8': (ward8_housing_counter / ward8_pop)},
      'Affordable Units per 1000 People' : {'Ward 1': ((ward1_housing_counter / ward1_pop) * 1000), 'Ward 2': ((ward2_housing_counter / ward2_pop) * 1000),
                                            'Ward 3': ((ward3_housing_counter / ward3_pop) * 1000), 'Ward 4': ((ward4_housing_counter / ward4_pop) * 1000),
                                            'Ward 5': ((ward5_housing_counter / ward5_pop) * 1000), 'Ward 6': ((ward6_housing_counter / ward6_pop) * 1000),
                                            'Ward 7': ((ward7_housing_counter / ward7_pop) * 1000), 'Ward 8': ((ward8_housing_counter / ward8_pop) * 1000)},
      'Percentage of Affordable Units Compared to DC Total' : {'Ward 1': "{:.2%}".format(ward1_housing_counter / total_housing_counter),
                                                               'Ward 2': "{:.2%}".format(ward2_housing_counter / total_housing_counter),
                                                               'Ward 3': "{:.2%}".format(ward3_housing_counter / total_housing_counter),
                                                               'Ward 4': "{:.2%}".format(ward4_housing_counter / total_housing_counter),
                                                               'Ward 5': "{:.2%}".format(ward5_housing_counter / total_housing_counter),
                                                               'Ward 6': "{:.2%}".format(ward6_housing_counter / total_housing_counter),
                                                               'Ward 7': "{:.2%}".format(ward7_housing_counter / total_housing_counter),
                                                               'Ward 8': "{:.2%}".format(ward8_housing_counter / total_housing_counter)}
      }

  return summary